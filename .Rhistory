album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L) #these 3 lines creates objects for artist, album and song name
folder <- paste("EssentiaOutput/", current.filename, sep ="") #file path
song.data <- fromJSON(folder) #load song data from JSON
#extracting our relevant song data from .JSON and creating objects for them
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance$mean
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
json.files <- list.files("EssentiaOutput/", pattern = "\\.json$", full.names = TRUE) #checking the list of all of the JSON files in the folder
# Create an empty data frame with correct column names
#switched our data frame to a tibble
song_data <- tibble(
artist = character(),
album = character(),
song_name = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beat_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
)
#############################################################################################################################################################
#for loop for creating our data frame of the json files and extracting the column information
#############################################################################################################################################################
for(file in json.files){
current.file.name <- basename(file)
file.name.parts<- str_split(current.file.name, "-", simplify=TRUE)
artist<-str_trim(file.name.parts[1])
album<-str_trim(file.name.parts[2])
song_name<-str_sub(str_trim(file.name.parts[3]), end=-6L)
song.data <- fromJSON(file)
overall_loundess <- song.data$lowlevel$loudness_ebu128
spectral_engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance$mean
pitch_salience <- song.data$lowlevel$pitch_salience$mean
bpm <- song.data$rhythm$bpm
beat_loudness <- song.data$rhythm$beats_loudness$mean
danceability <- song.data$rhythm$danceability
tuning_frequency <- song.data$tonal$tuning_frequency
song_data<-song_data |>
bind_rows(tibble(artist, album, song_name, overall_loundess, spectral_engery,
dissonance, pitch_salience, bpm, beat_loudness, danceability, tuning_frequency,
)) #we replaced rbind with bind_rows and then replaced data frame with tibble and are using pipes instead
}
song_data <- song_data |>
rename(track = song_name)#rename song name column to track so that it matches with our other tibbles
#############################################################################################################################################################
#cleaning and editing essentia csv file
#############################################################################################################################################################
essentia.df <- read_csv("EssentiaOutput/EssentiaModelOutput.csv") #this reads our csv file and now create the object for it
essentia.df.cleaned <- essentia.df |>
mutate(average.valence = rowMeans(across(c(deam_valence, emo_valence, muse_valence)), na.rm=T),
average.arousal = rowMeans(across(c(deam_arousal, emo_arousal, emo_arousal)), na.rm=T),
average.aggressive = rowMeans(across(c(nn_aggressive, eff_aggressive)), na.rm=T),
average.happy = rowMeans(across(c(nn_happy, eff_happy)), na.rm=T),
average.party = rowMeans(across(c(nn_party, eff_party)), na.rm=T) ,
average.relax = rowMeans(across(c(nn_relax, eff_relax)), na.rm=T) ,
average.sad = rowMeans(across(c(nn_sad, eff_sad)), na.rm=T) ,
average.acoustic = rowMeans(across(c(nn_acoustic, eff_acoustic)), na.rm=T) ,
average.electronic = rowMeans(across(c(nn_electronic, eff_electronic)), na.rm=T),
average.instrumental = rowMeans(across(c(nn_instrumental, eff_instrumental)), na.rm=T)) |>
rename(timbreBright = eff_timbre_bright)|>
select("artist", "album", "track", "average.valence", "average.arousal",
"average.aggressive", "average.happy", "average.party", "average.relax",
"average.sad", "average.acoustic" , "average.electronic", "average.instrumental",
"timbreBright")
#here we take the average across these rows and create new columns with the label average, we also rename eff_timbre_bright and then we only select the features that we just created
#############################################################################################################################################################
#cleaning and editing the LIWC csv file and merging the 3 data frames together
#############################################################################################################################################################
LIWC.df <- read_csv("LIWCOutput/LIWCOutput.csv") #this reads our csv file and now create the object for it
common.cols <- colnames(song_data)[1:3] #we create an object that we can reference in our merging data to ensure the first 3 columns are the same and no extra rows are created
#merge all 3 data sets by the first 3 columns
data.merged <- song_data |>
merge(essentia.df.cleaned, by = common.cols) |>
merge(LIWC.df, by = common.cols)
#write csv including everything except for allentown
training.data <- data.merged |>
filter(track != "Allentown")|>
write_csv("trainingdata.csv")
#write csv only including allentown
testing.data <- data.merged |>
filter(track == "Allentown")|>
write_csv("testingdata.csv")
#############################################################################################################################################################
#plotting the data
#############################################################################################################################################################
library(ggplot2)
instrumental_plot <- ggplot(training.data, aes(x = artist, y = average.instrumental)) +
geom_boxplot()
testing.data$average.instrumental
loudness_plot <- ggplot(training.data, aes(x = artist, y = overall.loundess)) +
geom_boxplot()
testing.data$overall.loundess
ggsave("instrumental_plot.pdf", plot = instrumental_plot, width = 7, height = 5)
ggsave("loudness_plot.pdf", plot = loudness_plot, width = 7, height = 5)
#########################################################
#HW 5, changing lab 3 code to tidyverse
########################################################
library(stringr)
library(jsonlite)
library(tidyverse)
current.filename <- "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json" #create our file name
file.name.parts<- str_split(current.filename, "-", simplify=TRUE) #splits our name when - occurs
artist<-str_sub(file.name.parts[1])
album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L) #these 3 lines creates objects for artist, album and song name
folder <- paste("EssentiaOutput/", current.filename, sep ="") #file path
song.data <- fromJSON(folder) #load song data from JSON
#extracting our relevant song data from .JSON and creating objects for them
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance$mean
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
json.files <- list.files("EssentiaOutput/", pattern = "\\.json$", full.names = TRUE) #checking the list of all of the JSON files in the folder
# Create an empty data frame with correct column names
#switched our data frame to a tibble
song_data <- tibble(
artist = character(),
album = character(),
song_name = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beat_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
)
#############################################################################################################################################################
#for loop for creating our data frame of the json files and extracting the column information
#############################################################################################################################################################
for(file in json.files){
current.file.name <- basename(file)
file.name.parts<- str_split(current.file.name, "-", simplify=TRUE)
artist<-str_trim(file.name.parts[1])
album<-str_trim(file.name.parts[2])
song_name<-str_sub(str_trim(file.name.parts[3]), end=-6L)
song.data <- fromJSON(file)
overall_loundess <- is.numeric(song.data$lowlevel$loudness_ebu128$integrated, na.rm =T)
spectral_engery <- song.data$lowlevel$spectral_energy$mean
dissonance <- song.data$lowlevel$dissonance$mean
pitch_salience <- song.data$lowlevel$pitch_salience$mean
bpm <- song.data$rhythm$bpm
beat_loudness <- song.data$rhythm$beats_loudness$mean
danceability <- song.data$rhythm$danceability
tuning_frequency <- song.data$tonal$tuning_frequency
song_data<-song_data |>
bind_rows(tibble(artist, album, song_name, overall_loundess, spectral_engery,
dissonance, pitch_salience, bpm, beat_loudness, danceability, tuning_frequency,
)) #we replaced rbind with bind_rows and then replaced data frame with tibble and are using pipes instead
}
#########################################################
#HW 5, changing lab 3 code to tidyverse
########################################################
library(stringr)
library(jsonlite)
library(tidyverse)
current.filename <- "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json" #create our file name
file.name.parts<- str_split(current.filename, "-", simplify=TRUE) #splits our name when - occurs
artist<-str_sub(file.name.parts[1])
album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L) #these 3 lines creates objects for artist, album and song name
folder <- paste("EssentiaOutput/", current.filename, sep ="") #file path
song.data <- fromJSON(folder) #load song data from JSON
#extracting our relevant song data from .JSON and creating objects for them
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance$mean
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
json.files <- list.files("EssentiaOutput/", pattern = "\\.json$", full.names = TRUE) #checking the list of all of the JSON files in the folder
# Create an empty data frame with correct column names
#switched our data frame to a tibble
song_data <- tibble(
artist = character(),
album = character(),
song_name = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beat_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
)
#############################################################################################################################################################
#for loop for creating our data frame of the json files and extracting the column information
#############################################################################################################################################################
for(file in json.files){
current.file.name <- basename(file)
file.name.parts<- str_split(current.file.name, "-", simplify=TRUE)
artist<-str_trim(file.name.parts[1])
album<-str_trim(file.name.parts[2])
song_name<-str_sub(str_trim(file.name.parts[3]), end=-6L)
song.data <- fromJSON(file)
overall_loundess <- is.numeric(song.data$lowlevel$loudness_ebu128$integrated)
spectral_engery <- song.data$lowlevel$spectral_energy$mean
dissonance <- song.data$lowlevel$dissonance$mean
pitch_salience <- song.data$lowlevel$pitch_salience$mean
bpm <- song.data$rhythm$bpm
beat_loudness <- song.data$rhythm$beats_loudness$mean
danceability <- song.data$rhythm$danceability
tuning_frequency <- song.data$tonal$tuning_frequency
song_data<-song_data |>
bind_rows(tibble(artist, album, song_name, overall_loundess, spectral_engery,
dissonance, pitch_salience, bpm, beat_loudness, danceability, tuning_frequency,
)) #we replaced rbind with bind_rows and then replaced data frame with tibble and are using pipes instead
}
song_data <- song_data |>
rename(track = song_name)#rename song name column to track so that it matches with our other tibbles
#############################################################################################################################################################
#cleaning and editing essentia csv file
#############################################################################################################################################################
essentia.df <- read_csv("EssentiaOutput/EssentiaModelOutput.csv") #this reads our csv file and now create the object for it
essentia.df.cleaned <- essentia.df |>
mutate(average.valence = rowMeans(across(c(deam_valence, emo_valence, muse_valence)), na.rm=T),
average.arousal = rowMeans(across(c(deam_arousal, emo_arousal, emo_arousal)), na.rm=T),
average.aggressive = rowMeans(across(c(nn_aggressive, eff_aggressive)), na.rm=T),
average.happy = rowMeans(across(c(nn_happy, eff_happy)), na.rm=T),
average.party = rowMeans(across(c(nn_party, eff_party)), na.rm=T) ,
average.relax = rowMeans(across(c(nn_relax, eff_relax)), na.rm=T) ,
average.sad = rowMeans(across(c(nn_sad, eff_sad)), na.rm=T) ,
average.acoustic = rowMeans(across(c(nn_acoustic, eff_acoustic)), na.rm=T) ,
average.electronic = rowMeans(across(c(nn_electronic, eff_electronic)), na.rm=T),
average.instrumental = rowMeans(across(c(nn_instrumental, eff_instrumental)), na.rm=T)) |>
rename(timbreBright = eff_timbre_bright)|>
select("artist", "album", "track", "average.valence", "average.arousal",
"average.aggressive", "average.happy", "average.party", "average.relax",
"average.sad", "average.acoustic" , "average.electronic", "average.instrumental",
"timbreBright")
#here we take the average across these rows and create new columns with the label average, we also rename eff_timbre_bright and then we only select the features that we just created
#############################################################################################################################################################
#cleaning and editing the LIWC csv file and merging the 3 data frames together
#############################################################################################################################################################
LIWC.df <- read_csv("LIWCOutput/LIWCOutput.csv") #this reads our csv file and now create the object for it
common.cols <- colnames(song_data)[1:3] #we create an object that we can reference in our merging data to ensure the first 3 columns are the same and no extra rows are created
#merge all 3 data sets by the first 3 columns
data.merged <- song_data |>
merge(essentia.df.cleaned, by = common.cols) |>
merge(LIWC.df, by = common.cols)
#write csv including everything except for allentown
training.data <- data.merged |>
filter(track != "Allentown")|>
write_csv("trainingdata.csv")
#write csv only including allentown
testing.data <- data.merged |>
filter(track == "Allentown")|>
write_csv("testingdata.csv")
#############################################################################################################################################################
#plotting the data
#############################################################################################################################################################
library(ggplot2)
instrumental_plot <- ggplot(training.data, aes(x = artist, y = average.instrumental)) +
geom_boxplot()
testing.data$average.instrumental
loudness_plot <- ggplot(training.data, aes(x = artist, y = overall.loundess)) +
geom_boxplot()
testing.data$overall.loundess
ggsave("instrumental_plot.pdf", plot = instrumental_plot, width = 7, height = 5)
ggsave("loudness_plot.pdf", plot = loudness_plot, width = 7, height = 5)
# Create an empty data frame with correct column names
song_data <- data.frame(
artist = character(),
album = character(),
song_name = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beat_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
stringsAsFactors = FALSE  # prevents conversion of character variables to factors
)
#############################################################################################################################################################
#for loop for creating our data frame of the json files and extracting the column information
#############################################################################################################################################################
for(file in json.files){
current.file.name <- basename(file)
file.name.parts<- str_split(current.file.name, "-", simplify=TRUE)
# PROF: INDENTING IS INCORRECT BELOW
artist<-str_trim(file.name.parts[1])
album<-str_trim(file.name.parts[2])
song.name<-str_sub(str_trim(file.name.parts[3]), end=-6L)
song.data <- fromJSON(file)
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
song_data <- rbind(song_data , data.frame(
artist, album, song.name, overall.loundess, spectral.engery,
dissonance, pitch.salience, bpm, beat.loudness, danceability, tuning.frequency,
stringsAsFactors = FALSE
))
json.files <- list.files("EssentiaOutput/", pattern = "\\.json$", full.names = TRUE) #checking the list of all of the JSON files in the folder
# Create an empty data frame with correct column names
song_data <- data.frame(
artist = character(),
album = character(),
song_name = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beat_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
stringsAsFactors = FALSE  # prevents conversion of character variables to factors
)
#############################################################################################################################################################
#for loop for creating our data frame of the json files and extracting the column information
#############################################################################################################################################################
for(file in json.files){
current.file.name <- basename(file)
file.name.parts<- str_split(current.file.name, "-", simplify=TRUE)
# PROF: INDENTING IS INCORRECT BELOW
artist<-str_trim(file.name.parts[1])
album<-str_trim(file.name.parts[2])
song.name<-str_sub(str_trim(file.name.parts[3]), end=-6L)
song.data <- fromJSON(file)
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
song_data <- rbind(song_data , data.frame(
artist, album, song.name, overall.loundess, spectral.engery,
dissonance, pitch.salience, bpm, beat.loudness, danceability, tuning.frequency,
stringsAsFactors = FALSE
))
}
view(song_data)
view(song_data)
json.files <- list.files("EssentiaOutput/", pattern = "\\.json$", full.names = TRUE) #checking the list of all of the JSON files in the folder
# Create an empty data frame with correct column names
song_data <- data.frame(
artist = character(),
album = character(),
song_name = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beat_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
stringsAsFactors = FALSE  # prevents conversion of character variables to factors
)
#############################################################################################################################################################
#for loop for creating our data frame of the json files and extracting the column information
#############################################################################################################################################################
for(file in json.files){
current.file.name <- basename(file)
file.name.parts<- str_split(current.file.name, "-", simplify=TRUE)
# PROF: INDENTING IS INCORRECT BELOW
artist<-str_trim(file.name.parts[1])
album<-str_trim(file.name.parts[2])
song.name<-str_sub(str_trim(file.name.parts[3]), end=-6L)
song.data <- fromJSON(file)
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
song_data <- rbind(song_data , data.frame(
artist, album, song.name, overall.loundess, spectral.engery,
dissonance, pitch.salience, bpm, beat.loudness, danceability, tuning.frequency,
stringsAsFactors = FALSE
))
}
##
# PROF: GOOD WORK! THE CODE WORKS AS INTENDED!
#       NEXT TIME, TRY TO CLEAN IT UP -- ADD A DESCRIPTIVE
#       HEADER AND COMMENT MORE THAN JUST WHAT STEP IT IS.
#       READERS SHOULDN'T HAVE TO CROSS REFERENCE WITH ANOTHER
#       DOCUMENT TO UNDERSTAND WHAT YOU'RE DOING.
library(stringr)
library(jsonlite)
current.filename <- "The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"
file.name.parts<- str_split(current.filename, "-", simplify=TRUE)
artist<-str_sub(file.name.parts[1])
album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L)
folder <- paste("EssentiaOutput/", current.filename, sep ="") #file path
song.data <- fromJSON(folder) #load song data from JSON
#extracting our relevant song data
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
json.files <- list.files("EssentiaOutput/", pattern = "\\.json$", full.names = TRUE) #checking the list of all of the JSON files in the folder
# Create an empty data frame with correct column names
song_data <- data.frame(
artist = character(),
album = character(),
song_name = character(),
overall_loudness = numeric(),
spectral_energy = numeric(),
dissonance = numeric(),
pitch_salience = numeric(),
bpm = numeric(),
beat_loudness = numeric(),
danceability = numeric(),
tuning_frequency = numeric(),
stringsAsFactors = FALSE  # prevents conversion of character variables to factors
)
#############################################################################################################################################################
#for loop for creating our data frame of the json files and extracting the column information
#############################################################################################################################################################
for(file in json.files){
current.file.name <- basename(file)
file.name.parts<- str_split(current.file.name, "-", simplify=TRUE)
# PROF: INDENTING IS INCORRECT BELOW
artist<-str_trim(file.name.parts[1])
album<-str_trim(file.name.parts[2])
song.name<-str_sub(str_trim(file.name.parts[3]), end=-6L)
song.data <- fromJSON(file)
overall.loundess <- song.data$lowlevel$loudness_ebu128$integrated
spectral.engery <- song.data$lowlevel$spectral_energy
dissonance <- song.data$lowlevel$dissonance
pitch.salience <- song.data$lowlevel$pitch_salience
bpm <- song.data$rhythm$bpm
beat.loudness <- song.data$rhythm$beats_loudness
danceability <- song.data$rhythm$danceability
tuning.frequency <- song.data$tonal$tuning_frequency
song_data <- rbind(song_data , data.frame(
artist, album, song.name, overall.loundess, spectral.engery,
dissonance, pitch.salience, bpm, beat.loudness, danceability, tuning.frequency,
stringsAsFactors = FALSE
))
}
#############################################################################################################################################################
#cleaning and editing essentia csv file
#############################################################################################################################################################
# PROF: THIS WORKS BECAUSE NONE OF THESE VARIABLES IS NA
#       IF THEY WERE THE WHOLE MEASUREMENT WOULD GO TO NA
#       THAT IS, WE WOULDN'T BE ABLE TO USE na.rm=T
essentia.df <- read.csv("EssentiaOutput/EssentiaModelOutput.csv") #this reads our csv file and now create the object for it
essentia.df$average.valence <-((essentia.df$deam_valence + essentia.df$emo_valence + essentia.df$muse_valence) / 3)
essentia.df$average.arousal <- ((essentia.df$deam_arousal + essentia.df$emo_valence + essentia.df$muse_valence) / 3)
essentia.df$average.aggressive <- ((essentia.df$nn_aggressive + essentia.df$eff_aggressive) /2)
essentia.df$average.happy <- ((essentia.df$nn_happy + essentia.df$eff_happy) / 2)
essentia.df$average.party <- ((essentia.df$nn_party + essentia.df$eff_party) / 2)
essentia.df$average.relaxed <- ((essentia.df$nn_relax + essentia.df$eff_relax) / 2)
essentia.df$average.sad <- ((essentia.df$nn_sad + essentia.df$eff_sad) / 2)
essentia.df$average.acoustic <- ((essentia.df$nn_acoustic + essentia.df$eff_acoustic) / 2)
essentia.df$average.electronic <- ((essentia.df$nn_electronic + essentia.df$eff_electronic) / 2)
essentia.df$average.instrumental <- ((essentia.df$nn_instrumental + essentia.df$eff_instrumental) / 2)
colnames(essentia.df)[colnames(essentia.df) == "eff_timbre_bright"] <- "timbreBright"
essentia.df <- essentia.df[, c("artist", "album", "track", "average.valence", "average.arousal",
"average.aggressive", "average.happy", "average.party", "average.relaxed",
"average.sad", "average.acoustic" , "average.electronic", "average.instrumental",
"timbreBright") ] #this keeps all of the columns that we want while getting rid of all of the columns that we don't want in our df
#############################################################################################################################################################
#cleaning and editing the LIWC csv file and merging the 3 data frames together
#############################################################################################################################################################
LIWC.df <- read.csv("LIWCOutput/LIWCOutput.csv") #this reads our csv file and now create the object for it
colnames(song_data)[colnames(song_data) == "song.name"] <- "track" #this switches the name of song.name to track in our song_data df
# PROF: WHAT DOES reduce() do?
merged_df <- Reduce(function(x, y) merge(x, y, by = c("artist", "album", "track"), all = TRUE), list(song_data, essentia.df, LIWC.df)) #merges our df by setting the first 3 columns equal
colnames(merged_df)[colnames(merged_df) == "function"] <- "funct"
training.data <- subset(merged_df, track != "Allentown") #everything except for Allentown
testing.data <- subset(merged_df, track == "Allentown") #just ALlentown
write.csv(training.data, "trainingdata.csv", row.names = FALSE)
write.csv(testing.data, "testingdata.csv", row.names = FALSE)
#############################################################################################################################################################
#plotting the data
#############################################################################################################################################################
library(ggplot2)
instrumental_plot <- ggplot(training.data, aes(x = artist, y = average.instrumental)) +
geom_boxplot()
testing.data$average.instrumental
loudness_plot <- ggplot(training.data, aes(x = artist, y = overall.loundess)) +
geom_boxplot()
testing.data$overall.loundess
ggsave("instrumental_plot.pdf", plot = instrumental_plot, width = 7, height = 5)
ggsave("loudness_plot.pdf", plot = loudness_plot, width = 7, height = 5)
